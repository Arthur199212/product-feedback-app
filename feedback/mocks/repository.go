// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_feedback is a generated GoMock package.
package mock_feedback

import (
	feedback "product-feedback/feedback"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFeedbackRepository is a mock of FeedbackRepository interface.
type MockFeedbackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackRepositoryMockRecorder
}

// MockFeedbackRepositoryMockRecorder is the mock recorder for MockFeedbackRepository.
type MockFeedbackRepositoryMockRecorder struct {
	mock *MockFeedbackRepository
}

// NewMockFeedbackRepository creates a new mock instance.
func NewMockFeedbackRepository(ctrl *gomock.Controller) *MockFeedbackRepository {
	mock := &MockFeedbackRepository{ctrl: ctrl}
	mock.recorder = &MockFeedbackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackRepository) EXPECT() *MockFeedbackRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFeedbackRepository) Create(userId int, f feedback.CreateFeedbackInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, f)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFeedbackRepositoryMockRecorder) Create(userId, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFeedbackRepository)(nil).Create), userId, f)
}

// Delete mocks base method.
func (m *MockFeedbackRepository) Delete(userId, feedbackId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, feedbackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFeedbackRepositoryMockRecorder) Delete(userId, feedbackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFeedbackRepository)(nil).Delete), userId, feedbackId)
}

// GetAll mocks base method.
func (m *MockFeedbackRepository) GetAll() ([]feedback.Feedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]feedback.Feedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockFeedbackRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFeedbackRepository)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockFeedbackRepository) GetById(feedbackId int) (feedback.Feedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", feedbackId)
	ret0, _ := ret[0].(feedback.Feedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockFeedbackRepositoryMockRecorder) GetById(feedbackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockFeedbackRepository)(nil).GetById), feedbackId)
}

// Update mocks base method.
func (m *MockFeedbackRepository) Update(userId, feedbackId int, f feedback.UpdateFeedbackInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, feedbackId, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFeedbackRepositoryMockRecorder) Update(userId, feedbackId, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFeedbackRepository)(nil).Update), userId, feedbackId, f)
}
