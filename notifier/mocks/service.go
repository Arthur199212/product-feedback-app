// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_notifier is a generated GoMock package.
package mock_notifier

import (
	notifier "product-feedback/notifier"
	ws "product-feedback/ws"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotifierService is a mock of NotifierService interface.
type MockNotifierService struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierServiceMockRecorder
}

// MockNotifierServiceMockRecorder is the mock recorder for MockNotifierService.
type MockNotifierServiceMockRecorder struct {
	mock *MockNotifierService
}

// NewMockNotifierService creates a new mock instance.
func NewMockNotifierService(ctrl *gomock.Controller) *MockNotifierService {
	mock := &MockNotifierService{ctrl: ctrl}
	mock.recorder = &MockNotifierServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifierService) EXPECT() *MockNotifierServiceMockRecorder {
	return m.recorder
}

// BroadcastMessage mocks base method.
func (m *MockNotifierService) BroadcastMessage(et notifier.EventType, sub notifier.SubjectType, id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastMessage", et, sub, id)
}

// BroadcastMessage indicates an expected call of BroadcastMessage.
func (mr *MockNotifierServiceMockRecorder) BroadcastMessage(et, sub, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessage", reflect.TypeOf((*MockNotifierService)(nil).BroadcastMessage), et, sub, id)
}

// Register mocks base method.
func (m *MockNotifierService) Register(client *ws.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", client)
}

// Register indicates an expected call of Register.
func (mr *MockNotifierServiceMockRecorder) Register(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockNotifierService)(nil).Register), client)
}

// Unregister mocks base method.
func (m *MockNotifierService) Unregister(client *ws.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", client)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockNotifierServiceMockRecorder) Unregister(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockNotifierService)(nil).Unregister), client)
}
